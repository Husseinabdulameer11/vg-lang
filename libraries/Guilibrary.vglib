/## Guilibrary provides graphical user interface components for VG applications.
# This library includes functions for creating windows, buttons, images, and other UI elements.
##/
library Guilibrary {

    /## The window namespace contains functions for creating and managing application windows.
    ##/
    namespace window {
        /## Creates a new window with the specified title and dimensions.
        # @param title The title to display in the window's title bar
        # @param width The width of the window in pixels
        # @param height The height of the window in pixels
        # @return A window object that can be used with other window functions
        ##/
        function create(title, width, height) {
            ## Creates a new window instance using the MyGUI constructor
            return VgSystemCall("components.MyGUI", "<init>", title, width, height);
        }

        /## Displays the window to the user.
        # @param window The window object to display
        ##/
        function launch(window) {
            ## Launches the given window (makes it visible)
            return VgSystemCall("components.MyGUI", "launch", window);
        }

        /## Sets the icon for the window.
        # @param window The window object to modify
        # @param iconName Path to the icon file
        ##/
        function setIcon(window, iconName) {
            ## Sets the window icon
            return VgSystemCall("components.MyGUI", "setWindowIcon", window, iconName);
        }

        /## Adds a component to the window.
        # @param window The window object to add the component to
        # @param component The UI component to add to the window
        # @return Success status of the operation
        ##/
        function addComponentToWindow(window, component) {
            ## Adds a component to the window
            return VgSystemCall("components.MyGUI", "addComponentToWindow", window, window, component);
        }

        /## Sets the background color of a window.
        # @param window The window object to modify
        # @param colorCode The color to set as background (hex format: "#RRGGBB")
        # @return Success status of the operation
        ##/
        function setBackgroundColor(window, colorCode) {
            var color = VgSystemCall("java.awt.Color", "decode", colorCode);
            return VgSystemCall("components.MyGUI", "setWindowBackgroundColor", window, color);
        }
    }

    /## The popup namespace contains functions for creating dialog boxes and notifications.
    ##/
    namespace popup {
        /## Displays an information dialog with the specified message.
        # @param window The parent window for this dialog
        # @param message The message to display
        # @param title The title for the dialog box
        # @return User's response to the dialog
        ##/
        function info(window, message, title) {
            return VgSystemCall("components.MyGUI", "showInfoPopup", window, message, title);
        }

        /## Displays a warning dialog with the specified message.
        # @param window The parent window for this dialog
        # @param message The warning message to display
        # @param title The title for the dialog box
        # @return User's response to the dialog
        ##/
        function warning(window, message, title) {
            return VgSystemCall("components.MyGUI", "showWarningPopup", window, message, title);
        }

        /## Displays an error dialog with the specified message.
        # @param window The parent window for this dialog
        # @param message The error message to display
        # @param title The title for the dialog box
        # @return User's response to the dialog
        ##/
        function error(window, message, title) {
            return VgSystemCall("components.MyGUI", "showErrorPopup", window, message, title);
        }
    }

    /## The Callbacks namespace contains functions for handling various events.
    ##/
    namespace Callbacks {
        /## Handles key press events.
        # @param msg The message associated with the key event
        # @param code The key code of the pressed key
        ##/
        function onKey(msg, code) {
            print("Callbacks.onKey => msg: " + msg + ", code: " + code);
        }
    }

    /## The Button namespace contains functions for creating and managing buttons.
    ##/
    namespace Button {
        /## Creates a button with the specified text and position.
        # @param text The text to display on the button
        # @param x The x-coordinate of the button
        # @param y The y-coordinate of the button
        # @param width The width of the button in pixels
        # @param height The height of the button in pixels
        # @return A button object that can be used with other button functions
        ##/
        function createButton(text, x, y, width, height) {
            return VgSystemCall("components.MyGUI$MyButton", "<init>", text, x, y, width, height);
        }

        /## Sets the color of a button.
        # @param button The button object to modify
        # @param colorCode The color to set (hex format: "#RRGGBB")
        # @return Success status of the operation
        ##/
        function setButtonColor(button, colorCode) {
            var color = VgSystemCall("java.awt.Color", "decode", colorCode);
            return VgSystemCall("components.MyGUI$MyButton", "setButtonColor", button, color);
        }
    }

    /## The IOEvents namespace contains functions for handling user input events.
    ##/
    namespace IOEvents {
        /## Sets a callback function for key press events.
        # @param window The window to attach the key press handler to
        # @param method The function to call when a key is pressed
        ##/
        function setOnKeyPress(window, method) {
            return VgSystemCall("components.MyGUI", "setOnKeyPress", window, method);
        }

        /## Sets a callback function for button click events.
        # @param button The button to attach the click handler to
        # @param method The function to call when the button is clicked
        ##/
        function setOnClick(button, method) {
            return VgSystemCall("components.MyGUI$MyButton", "setOnClick", button, method);
        }
    }

    /## The Image namespace contains functions for creating and manipulating images.
    ##/
    namespace Image {
        /## Creates an image component with the specified properties.
        # @param imagePath Path to the image file
        # @param x The x-coordinate of the image
        # @param y The y-coordinate of the image
        # @param width The width of the image in pixels
        # @param height The height of the image in pixels
        # @return An image component that can be added to a window or pane
        ##/
        function createImage(imagePath, x, y, width, height) {
            return VgSystemCall("components.MyGUI$MyImage", "<init>", imagePath, x, y, width, height);
        }
        
        /## Changes the image displayed in an image component.
        # @param imageComponent The image component to modify
        # @param imagePath Path to the new image file
        ##/
        function setImage(imageComponent, imagePath) {
            return VgSystemCall("components.MyGUI$MyImage", "setImage", imageComponent, imagePath);
        }
        
        /## Moves an image component to a new position.
        # @param imageComponent The image component to move
        # @param x The new x-coordinate
        # @param y The new y-coordinate
        ##/
        function moveImage(imageComponent, x, y) {
            return VgSystemCall("components.MyGUI$MyImage", "moveImage", imageComponent, x, y);
        }
        
        /## Resizes an image component.
        # @param imageComponent The image component to resize
        # @param width The new width in pixels
        # @param height The new height in pixels
        ##/
        function resizeImage(imageComponent, width, height) {
            return VgSystemCall("components.MyGUI$MyImage", "resizeImage", imageComponent, width, height);
        }
        
        /## Adds an image component to a window.
        # @param window The window to add the image to
        # @param imageComponent The image component to add
        ##/
        function addImageToWindow(window, imageComponent) {
            return VgSystemCall("components.MyGUI", "add", window, imageComponent);
        }
    }

    /## The Pane namespace contains functions for creating and managing panes (containers).
    ##/
    namespace Pane {
        /## Creates a pane with the specified position and dimensions.
        # @param x The x-coordinate of the pane
        # @param y The y-coordinate of the pane
        # @param width The width of the pane in pixels
        # @param height The height of the pane in pixels
        # @return A pane object that can be used with other pane functions
        ##/
        function createPane(x, y, width, height) {
            return VgSystemCall("components.MyGUI$MyPane", "<init>", x, y, width, height);
        }

        /## Sets the background color of a pane.
        # @param pane The pane object to modify
        # @param colorCode The color to set (hex format: "#RRGGBB")
        # @return Success status of the operation
        ##/
        function setPaneColor(pane, colorCode) {
            var color = VgSystemCall("java.awt.Color", "decode", colorCode);
            return VgSystemCall("components.MyGUI$MyPane", "setPaneColor", pane, color);
        }

        /## Adds a component to a pane.
        # @param pane The pane to add the component to
        # @param component The UI component to add
        ##/
        function addComponentToPane(pane, component) {
            return VgSystemCall("components.MyGUI$MyPane", "add", pane, component);
        }

        /## Sets the position and size of a pane.
        # @param pane The pane to modify
        # @param x The new x-coordinate
        # @param y The new y-coordinate
        # @param width The new width in pixels
        # @param height The new height in pixels
        ##/
        function setPaneBounds(pane, x, y, width, height) {
            return VgSystemCall("components.MyGUI$MyPane", "setBounds", pane, x, y, width, height);
        }

        /## Sets a background image for a pane.
        # @param images The image to use as background
        ##/
        function setPaneBackgroundImage(images) {
            return VgSystemCall("components.MyGUI$MyPane", "setPaneBackgroundImage", images);
        }

        /## Sets a border for a pane.
        # @param pane The pane to modify
        # @param colorCode The border color (hex format: "#RRGGBB")
        # @param thickness The border thickness in pixels
        ##/
        function setPaneBorder(pane, colorCode, thickness) {
            var color = VgSystemCall("java.awt.Color", "decode", colorCode);
            return VgSystemCall("components.MyGUI$MyPane", "setPaneBorder", pane, color, thickness);
        }
    }

    /## The Sound namespace contains functions for playing and managing sounds.
    ##/
    namespace Sound {
        /## Plays a sound from a file.
        # @param filePath Path to the sound file
        ##/
        function playSound(filePath) {
            return VgSystemCall("components.MyGUI$mySoundManager", "playSound", filePath);
        }
        
        /## Stops all currently playing sounds.
        ##/
        function stopAllSounds() {
            return VgSystemCall("components.MyGUI$mySoundManager", "stopAllSounds");
        }
        
        /## Plays a sound looped a specified number of times.
        # @param filePath Path to the sound file
        # @param loopCount Number of times to loop the sound
        ##/
        function playSoundLoop(filePath, loopCount) {
            return VgSystemCall("components.MyGUI$mySoundManager", "playSoundLoop", filePath, loopCount);
        }
        
        /## Sets the volume level for sounds.
        # @param volumeLevel Volume level (0.0 to 1.0)
        ##/
        function setVolume(volumeLevel) {
            return VgSystemCall("components.MyGUI$mySoundManager", "setVolume", volumeLevel);
        }
    }
}
